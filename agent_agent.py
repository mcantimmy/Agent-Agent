from textwrap import dedent
from phi.assistant import Assistant
from phi.tools.serpapi_tools import SerpApiTools
import streamlit as st
from phi.llm.openai import OpenAIChat

st.title("AI agent who designs AI assistants")
st.caption("Agent Agent")

# Get OpenAI API key from user
openai_api_key = st.text_input("Enter OpenAI API Key to access GPT-4o", type="password")

# Get SerpAPI key from the user
serp_api_key = st.text_input("Enter Serp API Key for Search functionality", type="password")

if openai_api_key and serp_api_key:
    assistant = Assistant(
        name="Assistant",
        role="Follows the role description and instructions provided to be the best assistant possible.",
        llm=OpenAIChat(model="gpt-4o", api_key=openai_api_key),
        description=dedent(
            """\
        You are an AI assistant defined by the role and instructions given to you by the engineer.
        """
        ),
        instructions=[
            "Perform the tasks of an agent given your role.",
            "If your role requires searching online, `search_google` and analyze the results."
            "Create a response for the engineer that fulfills your instructions.",
            "If you searched online, incorporate appropriate search results into your response."
            "Remember: the quality of the results is important.",
        ],
        tools=[SerpApiTools(api_key=serp_api_key)],
        add_datetime_to_instructions=True,
    )
    engineer = Assistant(
        name="Engineer",
        role="Defines the structure of an AI assistant that will address the user input. Then responds to the user with an answer to the input.",
        llm=OpenAIChat(model="gpt-4o", api_key=openai_api_key),
        description=dedent(
            """\
        You are a world-class AI engineer that builds frameworks to define AI assistants that you interact with.
        Your AI assistants are designed to optimally address and respond to the various types of user input given to you.
        You then take what the assistant generates and appropriately respond back to the user.
        """
        ),
        instructions=[
            "Given the user input, design a framework for an AI assistant who is specifically designed to perform the appropriate tasks to address the inquiry.",
            "The framework should include the role, description, and intructions to follow for the assistant.",
            "If you're unsure about what the user is referring to, just make your best guess. DO NOT ask follow-up questions."
            "Ensure the assistant is well-structured, informative, and engaging.",
            "Interact with the AI assistant by introducing yourself as the engineer and providing the role, description, and instructions to the assistant on your team.",
            "Provide an answer to the user based on the results generated by your assistant.",
            "Only respond to the user with the answer, DO NOT respond with any of the designing you perform.",
            "Remember: the quality of the AI assistant is important.",
            "Focus on clarity, conciseness, coherence, and overall quality."
        ],
        team=[assistant],
        add_datetime_to_instructions=True,
        add_chat_history_to_prompt=True,
        num_history_messages=3,
    )


question = st.text_input("Interact with AI")

if st.button("Generate Response"):
    with st.spinner("Processing..."):
        response = engineer.run(f"User input: \'{question}\'", stream=True)
        st.write(response)